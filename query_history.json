[
  {
    "timestamp": "2025-03-08T16:35:54.546151",
    "natural_query": "show me all the customers who made purchase in the last month",
    "sql_query": "The exact SQL query depends on your database schema.  I'll provide a few examples assuming different table structures.  You'll need to adapt it to your specific table and column names.\n\n**Scenario 1:  Single table with customer and purchase date**\n\nLet's assume you have a table named `orders` with columns `customer_id` and `order_date`.\n\n```sql\nSELECT DISTINCT customer_id\nFROM orders\nWHERE order_date >= DATE('now', '-1 month');\n```\n\nThis query uses SQLite's `DATE()` function.  Other databases might use different date functions:\n\n* **MySQL, PostgreSQL:** `DATE_SUB(CURDATE(), INTERVAL 1 MONTH)`\n* **SQL Server:** `DATEADD(month, -1, GETDATE())`\n* **Oracle:** `ADD_MONTHS(SYSDATE, -1)`\n\n\n**Scenario 2: Separate customer and order tables**\n\nIf you have a `customers` table (with `customer_id`) and an `orders` table (with `customer_id` and `order_date`), the query would be:\n\n```sql\nSELECT c.customer_id\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nWHERE o.order_date >= DATE('now', '-1 month');\n```\n\nAgain, replace `DATE('now', '-1 month')`",
    "dialect": "mysql",
    "tags": [],
    "favorite": false
  }
]
